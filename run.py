import sqlite3

import folium
import pandas as pd
import plotly.express as px
import requests
import streamlit as st
from streamlit_folium import st_folium

st.set_page_config(page_title="üåç World Countries App", layout="wide")


@st.cache_data
def load_data():
    with sqlite3.connect("countries.db") as conn:
        df = pd.read_sql_query("SELECT * FROM countries", conn)
    df['capital_length'] = df['capital'].apply(lambda x: len(x) if x else 0)
    df['capital_length_cat'] = pd.cut(df['capital_length'], bins=[0, 5, 10, 15, 20, 100],
                                      labels=['0-5', '6-10', '11-15', '16-20', '20+'])
    df['density'] = df['population'] / df['area']
    return df


# ---------------------------- üìä Dashboard ----------------------------
st.link_button('DM me on Telegram', 'https://t.me/Hopxol')
st.title("üìä –î–∞—à–±–æ—Ä–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –º–∏—Ä–∞")
st.markdown("""
–≠—Ç–æ—Ç –¥–∞—à–±–æ—Ä–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ REST Countries API –∏ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
- üìå –ù–∞—Å–µ–ª–µ–Ω–∏–µ
- üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
- üó£Ô∏è –Ø–∑—ã–∫–∏
- üåê –†–µ–≥–∏–æ–Ω—ã –∏ —Å—É–±—Ä–µ–≥–∏–æ–Ω—ã
""")

df = load_data()

map_fig = px.choropleth(
    df,
    locations="cca3",
    color="population",
    hover_name="name_common",
    color_continuous_scale="viridis",
    title="üó∫Ô∏è –ù–∞—Å–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º",
    labels={"population": "–ù–∞—Å–µ–ª–µ–Ω–∏–µ"}
)
st.plotly_chart(map_fig, use_container_width=True)

st.markdown("---")

# Define chart blocks
charts = []


def fmt(val): return f"{val:.1f}" if isinstance(val, float) else val


subregions = df['subregion'].value_counts().nlargest(10).reset_index()
subregions.columns = ['–°—É–±—Ä–µ–≥–∏–æ–Ω', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω']
fig1 = px.bar(subregions, x='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω', y='–°—É–±—Ä–µ–≥–∏–æ–Ω', orientation='h', color='–°—É–±—Ä–µ–≥–∏–æ–Ω')
charts.append(("üåç –¢–æ–ø-10 —Å—É–±—Ä–µ–≥–∏–æ–Ω–æ–≤", fig1))

fig2 = px.scatter(df, x='area', y='population', log_x=True, log_y=True, color='region')
charts.append(("üìè –ü–ª–æ—â–∞–¥—å vs –ù–∞—Å–µ–ª–µ–Ω–∏–µ", fig2))

top_lang = df.sort_values(by='language_count', ascending=False).head(15)
fig3 = px.bar(top_lang, x='language_count', y='name_common', orientation='h', color='name_common')
charts.append(("üó£Ô∏è –¢–æ–ø-15 –ø–æ —è–∑—ã–∫–∞–º", fig3))

region_counts = df['region'].value_counts().reset_index()
region_counts.columns = ['–†–µ–≥–∏–æ–Ω', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω']
fig5 = px.bar(region_counts, x='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω', y='–†–µ–≥–∏–æ–Ω', orientation='h', color='–†–µ–≥–∏–æ–Ω')
charts.append(("üó∫Ô∏è –°—Ç—Ä–∞–Ω—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º", fig5))

top20 = df.sort_values(by='population', ascending=False).head(20)
fig6 = px.bar(top20, x='population', y='name_common', orientation='h', color='name_common')
charts.append(("üèôÔ∏è –¢–æ–ø-20 –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é", fig6))

fig7 = px.pie(region_counts, names='–†–µ–≥–∏–æ–Ω', values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω', hole=0.3)
charts.append(("üåê –î–æ–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤", fig7))

avg_lang = df.groupby('region')['language_count'].mean().reset_index()
avg_lang['language_count'] = avg_lang['language_count'].round(1)
fig8 = px.bar(avg_lang, x='language_count', y='region', orientation='h', color='region')
charts.append(("üó£Ô∏è –°—Ä–µ–¥–Ω–µ–µ —è–∑—ã–∫–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º", fig8))

cap_len = df['capital_length_cat'].value_counts().sort_index().reset_index()
cap_len.columns = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª–∏–Ω—ã —Å—Ç–æ–ª–∏—Ü—ã', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω']
fig9 = px.bar(cap_len, x='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª–∏–Ω—ã —Å—Ç–æ–ª–∏—Ü—ã', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω', color='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª–∏–Ω—ã —Å—Ç–æ–ª–∏—Ü—ã')
charts.append(("üèõÔ∏è –î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–∏—Ü", fig9))

for i in range(0, len(charts), 2):
    cols = st.columns(2)
    for j in range(2):
        if i + j < len(charts):
            with cols[j]:
                st.subheader(charts[i + j][0])
                st.plotly_chart(charts[i + j][1], use_container_width=True)

st.markdown("---")

# ---------------------------- üåê Country Details ----------------------------
st.title("üåê –î–µ—Ç–∞–ª–∏ –ø–æ —Å—Ç—Ä–∞–Ω–µ")

country_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã", "Uzbekistan")


@st.cache_data
def get_country_data(name):
    response = requests.get(f"https://restcountries.com/v3.1/name/{name}")
    if response.status_code == 200:
        return response.json()[0]
    return None


country = get_country_data(country_name)

if not country:
    st.error("‚ùå –°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
    st.stop()

col1, col2, col3 = st.columns([2, 1, 1])

with col1:
    st.markdown(f"## {country['name']['official']} ({country['name']['common']})")
    st.markdown(
        f"**–†–µ–≥–∏–æ–Ω:** {country.get('region', '‚Äî')} &nbsp;&nbsp;|&nbsp;&nbsp; **–°—É–±—Ä–µ–≥–∏–æ–Ω:** {country.get('subregion', '‚Äî')}")
    st.markdown(
        f"**–°—Ç–æ–ª–∏—Ü–∞:** {', '.join(country.get('capital', []))} &nbsp;&nbsp;|&nbsp;&nbsp; **–ù–∞—Å–µ–ª–µ–Ω–∏–µ:** {country['population']:,}")
    st.markdown(
        f"**–ü–ª–æ—â–∞–¥—å:** {country['area']:,} –∫–º¬≤ &nbsp;&nbsp;|&nbsp;&nbsp; **–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç:** {', '.join(country.get('continents', []))}")
with col2:
    st.image(country["flags"]["png"], caption="–§–ª–∞–≥", width=350)

with col3:
    if "coatOfArms" in country and country["coatOfArms"].get("png"):
        st.image(country["coatOfArms"]["png"], caption="–ì–µ—Ä–±", width=170)

colA, colB = st.columns(2)
with colA:
    st.subheader("üí± –í–∞–ª—é—Ç–∞ –∏ –Ø–∑—ã–∫–∏")
    currencies = country.get("currencies", {})
    if currencies:
        currency_data = [
            {"–ö–æ–¥": code, "–ù–∞–∑–≤–∞–Ω–∏–µ": val["name"], "–°–∏–º–≤–æ–ª": val.get("symbol", "")}
            for code, val in currencies.items()
        ]
        st.table(pd.DataFrame(currency_data))

    languages = country.get("languages", {})
    if languages:
        st.write("**–Ø–∑—ã–∫–∏:**", ", ".join(languages.values()))

    st.write("**–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã:**", ", ".join(country.get("timezones", [])))
    st.write("**TLD:**", ", ".join(country.get("tld", [])))
    st.write("**FIFA –∫–æ–¥:**", country.get("fifa", "‚Äî"))

with colB:
    st.subheader("üìå –ü—Ä–æ—á–µ–µ")
    st.write("**–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã (ISO):**", country.get("cca3", "‚Äî"))
    st.write("**–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è:**", "–î–∞" if country.get("independent") else "–ù–µ—Ç")
    st.write("**–ß–ª–µ–Ω –û–û–ù:**", "–î–∞" if country.get("unMember") else "–ù–µ—Ç")
    st.write("**–ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏:**", country.get("startOfWeek", "‚Äî").capitalize())

    borders = country.get("borders", [])
    st.write("**–°–æ—Å–µ–¥–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:**", ", ".join(borders) if borders else "‚Äî")

    gini = country.get("gini", {})
    if gini:
        gini_year = list(gini.keys())[0]
        st.write(f"**–ò–Ω–¥–µ–∫—Å –î–∂–∏–Ω–∏ ({gini_year}):** {gini[gini_year]}")

st.markdown("---")

st.subheader("üó∫Ô∏è –ö–∞—Ä—Ç–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã")
latlng = country.get("latlng", [0, 0])
m = folium.Map(location=latlng, zoom_start=5)
folium.Marker(location=latlng, popup=country['name']['common']).add_to(m)
st_folium(m, width=1920, height=600)
st.markdown("---")

st.markdown("with love üíò by Behzod Khidirov.")
st.link_button('DM me on Telegram', 'https://t.me/Hopxol')
