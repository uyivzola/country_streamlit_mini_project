import sqlite3

import folium
import geopandas as gpd
import pandas as pd
import plotly.express as px
import requests
import streamlit as st
from folium.plugins import Geocoder, MiniMap, Fullscreen, Draw
from streamlit_folium import st_folium

st.set_page_config(page_title="üåç World Countries App", layout="wide")


@st.cache_data
def load_data():
    with sqlite3.connect("countries.db") as conn:
        df = pd.read_sql_query("SELECT * FROM countries", conn)
    df['capital_length'] = df['capital'].apply(lambda x: len(x) if x else 0)
    df['capital_length_cat'] = pd.cut(df['capital_length'], bins=[0, 5, 10, 15, 20, 100],
                                      labels=['0-5', '6-10', '11-15', '16-20', '20+'])
    df['density'] = df['population'] / df['area']
    return df


@st.cache_data
def load_geojson():
    return gpd.read_file("world.geojson")


@st.cache_data
def get_country_data_by_cca3(cca3):
    response = requests.get(f"https://restcountries.com/v3.1/alpha/{cca3}")
    if response.status_code == 200:
        return response.json()[0]
    return None


@st.cache_data
def load_worldbank_from_db(cca2):
    with sqlite3.connect("countries.db") as conn:
        df = pd.read_sql_query(f"SELECT * FROM indicators WHERE country_code = '{cca2}'", conn)
    return df


df = load_data()
geo_data = load_geojson()

# ---------------------------- üìä Dashboard ----------------------------
st.link_button('DM me on Telegram', 'https://t.me/Hopxol')
st.title("üìä –î–∞—à–±–æ—Ä–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –º–∏—Ä–∞")
st.markdown("""
–≠—Ç–æ—Ç –¥–∞—à–±–æ—Ä–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ REST Countries API –∏ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
- üìå –ù–∞—Å–µ–ª–µ–Ω–∏–µ
- üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
- üó£Ô∏è –Ø–∑—ã–∫–∏
- üåê –†–µ–≥–∏–æ–Ω—ã –∏ —Å—É–±—Ä–µ–≥–∏–æ–Ω—ã
""")

map_fig = px.choropleth(
    df,
    locations="cca3",
    color="population",
    hover_name="name_common",
    color_continuous_scale="viridis",
    title="üó∫Ô∏è –ù–∞—Å–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º",
    labels={"population": "–ù–∞—Å–µ–ª–µ–Ω–∏–µ"}
)
st.plotly_chart(map_fig, use_container_width=True)
st.markdown("---")

# ------------------------- Multiple Charts --------------------------
charts = []

subregions = df['subregion'].value_counts().nlargest(10).reset_index()
subregions.columns = ['–°—É–±—Ä–µ–≥–∏–æ–Ω', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω']
fig1 = px.bar(subregions, x='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω', y='–°—É–±—Ä–µ–≥–∏–æ–Ω', orientation='h', color='–°—É–±—Ä–µ–≥–∏–æ–Ω')
charts.append(("üåç –¢–æ–ø-10 —Å—É–±—Ä–µ–≥–∏–æ–Ω–æ–≤", fig1))

fig2 = px.scatter(df, x='area', y='population', log_x=True, log_y=True, color='region')
charts.append(("üìè –ü–ª–æ—â–∞–¥—å vs –ù–∞—Å–µ–ª–µ–Ω–∏–µ", fig2))

top_lang = df.sort_values(by='language_count', ascending=False).head(15)
fig3 = px.bar(top_lang, x='language_count', y='name_common', orientation='h', color='name_common')
charts.append(("üó£Ô∏è –¢–æ–ø-15 –ø–æ —è–∑—ã–∫–∞–º", fig3))

region_counts = df['region'].value_counts().reset_index()
region_counts.columns = ['–†–µ–≥–∏–æ–Ω', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω']
fig5 = px.bar(region_counts, x='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω', y='–†–µ–≥–∏–æ–Ω', orientation='h', color='–†–µ–≥–∏–æ–Ω')
charts.append(("üó∫Ô∏è –°—Ç—Ä–∞–Ω—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º", fig5))

top20 = df.sort_values(by='population', ascending=False).head(20)
fig6 = px.bar(top20, x='population', y='name_common', orientation='h', color='name_common')
charts.append(("üèôÔ∏è –¢–æ–ø-20 –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é", fig6))

fig7 = px.pie(region_counts, names='–†–µ–≥–∏–æ–Ω', values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω', hole=0.3)
charts.append(("üåê –î–æ–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤", fig7))

avg_lang = df.groupby('region')['language_count'].mean().reset_index()
avg_lang['language_count'] = avg_lang['language_count'].round(1)
fig8 = px.bar(avg_lang, x='language_count', y='region', orientation='h', color='region')
charts.append(("üó£Ô∏è –°—Ä–µ–¥–Ω–µ–µ —è–∑—ã–∫–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º", fig8))

cap_len = df['capital_length_cat'].value_counts().sort_index().reset_index()
cap_len.columns = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª–∏–Ω—ã —Å—Ç–æ–ª–∏—Ü—ã', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω']
fig9 = px.bar(cap_len, x='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª–∏–Ω—ã —Å—Ç–æ–ª–∏—Ü—ã', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω', color='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª–∏–Ω—ã —Å—Ç–æ–ª–∏—Ü—ã')
charts.append(("üèõÔ∏è –î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–∏—Ü", fig9))

for i in range(0, len(charts), 2):
    cols = st.columns(2)
    for j in range(2):
        if i + j < len(charts):
            with cols[j]:
                st.subheader(charts[i + j][0])
                st.plotly_chart(charts[i + j][1], use_container_width=True)

st.markdown("---")

# Use country list from df with name_common and cca3
df_sorted = df.sort_values(by='name_common')
country_options = df_sorted[['name_common', 'cca3']].dropna()

# Set Uzbekistan as default if available
default_country = 'Uzbekistan' if 'Uzbekistan' in country_options['name_common'].values else \
country_options['name_common'].iloc[0]
selected_country_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É", country_options['name_common'].tolist(),
                                     index=country_options['name_common'].tolist().index(default_country))

selected_cca3 = country_options[country_options['name_common'] == selected_country_name]['cca3'].values[0]
selected_cca2 = df[df['cca3'] == selected_cca3]['cca2'].values[0]
country = get_country_data_by_cca3(selected_cca3)

# ---------------------------- üåê Country Details ----------------------------
st.title("üåê –î–µ—Ç–∞–ª–∏ –ø–æ —Å—Ç—Ä–∞–Ω–µ")

if not country:
    st.error("‚ùå –°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    st.stop()
# Load World Bank data for cards
wb_data = load_worldbank_from_db(selected_cca2)

# Define key indicators for cards
card_indicators = [
    "gdp_current_usd", "gdp_per_capita", "gdp_growth_percent", "inflation_percent",
    "unemployment_percent", "population_total", "imports_usd", "exports_usd"
]

card_titles = {
    'gdp_current_usd': 'üí∞ –í–í–ü (USD)',
    'population_total': 'üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ',
    'gdp_per_capita': 'üë§ –í–í–ü –Ω–∞ –¥—É—à—É',
    'gdp_growth_percent': 'üìà –†–æ—Å—Ç –í–í–ü (%)',
    'inflation_percent': 'üî• –ò–Ω—Ñ–ª—è—Ü–∏—è (%)',
    'unemployment_percent': 'üìâ –ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ (%)',
    'imports_usd': 'üì¶ –ò–º–ø–æ—Ä—Ç (USD)',
    'exports_usd': 'üö¢ –≠–∫—Å–ø–æ—Ä—Ç (USD)'
}
if not wb_data.empty:
    card_cols = st.columns(4)
    for i, indicator in enumerate(card_indicators):
        latest = wb_data[(wb_data['indicator'] == indicator) & (wb_data['year'] == 2023)]
        value = latest['value'].values[0] if not latest.empty else None
        label = card_titles.get(indicator, indicator)
        if value is not None:
            with card_cols[i % 4]:
                st.metric(label=label, value=f"{value:,.0f}")
        if (i + 1) % 4 == 0 and i + 1 < len(card_indicators):
            card_cols = st.columns(4)

col1, col2, col3 = st.columns([2, 1, 1])
with col1:
    st.markdown(f"## {country['name']['official']} ({country['name']['common']})")
    st.markdown(
        f"**–†–µ–≥–∏–æ–Ω:** {country.get('region', '‚Äî')} &nbsp;&nbsp;|&nbsp;&nbsp; **–°—É–±—Ä–µ–≥–∏–æ–Ω:** {country.get('subregion', '‚Äî')}")
    st.markdown(
        f"**–°—Ç–æ–ª–∏—Ü–∞:** {', '.join(country.get('capital', []))} &nbsp;&nbsp;|&nbsp;&nbsp; **–ù–∞—Å–µ–ª–µ–Ω–∏–µ:** {country['population']:,}")
    st.markdown(
        f"**–ü–ª–æ—â–∞–¥—å:** {country['area']:,} –∫–º¬≤ &nbsp;&nbsp;|&nbsp;&nbsp; **–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç:** {', '.join(country.get('continents', []))}")
with col2:
    st.image(country["flags"]["png"], caption="–§–ª–∞–≥", width=350)
with col3:
    if "coatOfArms" in country and country["coatOfArms"].get("png"):
        st.image(country["coatOfArms"]["png"], caption="–ì–µ—Ä–±", width=170)

colA, colB = st.columns(2)
with colA:
    st.subheader("üí± –í–∞–ª—é—Ç–∞ –∏ –Ø–∑—ã–∫–∏")
    currencies = country.get("currencies", {})
    if currencies:
        currency_data = [
            {"–ö–æ–¥": code, "–ù–∞–∑–≤–∞–Ω–∏–µ": val["name"], "–°–∏–º–≤–æ–ª": val.get("symbol", "")}
            for code, val in currencies.items()
        ]
        st.table(pd.DataFrame(currency_data))
    languages = country.get("languages", {})
    if languages:
        st.write("**–Ø–∑—ã–∫–∏:**", ", ".join(languages.values()))
    st.write("**–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã:**", ", ".join(country.get("timezones", [])))
    st.write("**TLD:**", ", ".join(country.get("tld", [])))
    st.write("**FIFA –∫–æ–¥:**", country.get("fifa", "‚Äî"))
with colB:
    st.subheader("–ü—Ä–æ—á–µ–µ")
    st.write("**–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã (ISO):**", selected_cca3)
    st.write("**–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è:**", "–î–∞" if country.get("independent") else "–ù–µ—Ç")
    st.write("**–ß–ª–µ–Ω –û–û–ù:**", "–î–∞" if country.get("unMember") else "–ù–µ—Ç")
    st.write("**–ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏:**", country.get("startOfWeek", "‚Äî").capitalize())
    borders = country.get("borders", [])
    st.write("**–°–æ—Å–µ–¥–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:**", ", ".join(borders) if borders else "‚Äî")
    gini = country.get("gini", {})
    if gini:
        gini_year = list(gini.keys())[0]
        st.write(f"**–ò–Ω–¥–µ–∫—Å –î–∂–∏–Ω–∏ ({gini_year}):** {gini[gini_year]}")

st.markdown("---")

st.subheader("üìà –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (World Bank)")
wb_data = load_worldbank_from_db(selected_cca2)
if not wb_data.empty:
    indicators_list = wb_data['indicator'].unique()
    for i in range(0, len(indicators_list), 3):
        cols = st.columns(3)
        for j in range(3):
            if i + j < len(indicators_list):
                indicator = indicators_list[i + j]
                chart_df = wb_data[wb_data['indicator'] == indicator].sort_values('year')
                if not chart_df.empty:
                    title_map = {
                        'gdp_current_usd': 'üí∞ –í–í–ü (—Ç–µ–∫—É—â–∏–π, USD)',
                        'gdp_per_capita': 'üë§ –í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è',
                        'gdp_growth_percent': 'üìà –†–æ—Å—Ç –í–í–ü (%)',
                        'inflation_percent': 'üî• –ò–Ω—Ñ–ª—è—Ü–∏—è (%)',
                        'unemployment_percent': 'üìâ –ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ (%)',
                        'population_total': 'üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ',
                        'imports_usd': 'üì¶ –ò–º–ø–æ—Ä—Ç (USD)',
                        'exports_usd': 'üö¢ –≠–∫—Å–ø–æ—Ä—Ç (USD)',
                        'exports_pct_gdp': 'üìä –≠–∫—Å–ø–æ—Ä—Ç (% –í–í–ü)',
                        'imports_pct_gdp': 'üìä –ò–º–ø–æ—Ä—Ç (% –í–í–ü)',
                        'current_account_pct_gdp': 'üíº –¢–µ–∫—É—â–∏–π —Å—á—ë—Ç (% –í–í–ü)',
                        'capital_formation_pct_gdp': 'üèóÔ∏è –ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è (% –í–í–ü)',
                        'govt_expenditure_pct_gdp': 'üèõÔ∏è –ì–æ—Å—Ä–∞—Å—Ö–æ–¥—ã (% –í–í–ü)'
                    }
                    title = title_map.get(indicator, indicator.replace('_', ' ').capitalize())
                    with cols[j]:
                        st.subheader(title)
                        if indicator in ['gdp_growth_percent', 'inflation_percent', 'unemployment_percent']:
                            fig = px.bar(chart_df, x="year", y="value", text="value")
                        elif indicator in ['population_total']:
                            fig = px.area(chart_df, x="year", y="value")
                        elif indicator in ['exports_pct_gdp', 'imports_pct_gdp']:
                            fig = px.scatter(chart_df, x="year", y="value", color_discrete_sequence=['#00CC96'])
                        else:
                            fig = px.line(chart_df, x="year", y="value", markers=True)

                        # Safely apply text labels if supported
                        try:
                            fig.update_traces(
                                texttemplate='%{text:.2s}',
                                textposition='top center'
                            )
                        except:
                            pass

                        fig.update_layout(
                            yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ",
                            xaxis_title="–ì–æ–¥",
                            height=350,
                            margin=dict(t=10)
                        )
                        st.plotly_chart(fig, use_container_width=True)
else:
    st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã.")


st.markdown("with love üíò by Behzod Khidirov.")
st.link_button('DM me on Telegram', 'https://t.me/Hopxol')

st.subheader("üó∫Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —Å—Ç—Ä–∞–Ω—ã")

geo_match = geo_data[geo_data["iso_a3"] == selected_cca3]

if not geo_match.empty:
    geo_match = geo_match.to_crs(epsg=3857)
    centroid = geo_match.geometry.centroid.to_crs(epsg=4326).iloc[0]

    folium_map = folium.Map(location=[centroid.y, centroid.x], zoom_start=5)

    folium.GeoJson(geo_match.to_crs(epsg=4326), name="–ì—Ä–∞–Ω–∏—Ü—ã —Å—Ç—Ä–∞–Ω—ã").add_to(folium_map)

    capital_name = ", ".join(country.get("capital", []))
    capital_coord = country.get("capitalInfo", {}).get("latlng", None)

    if capital_coord:
        folium.Marker(
            location=capital_coord,
            popup=f"Capital: {capital_name}",
            icon=folium.Icon(color="green", icon="flag")
        ).add_to(folium_map)
    else:
        folium.Marker(
            location=[centroid.y, centroid.x],
            popup=f"Capital (approx.): {capital_name}",
            icon=folium.Icon(color="gray", icon="question-sign")
        ).add_to(folium_map)

    Geocoder().add_to(folium_map)
    Fullscreen().add_to(folium_map)
    Draw(export=False).add_to(folium_map)
    MiniMap(position="bottomright").add_to(folium_map)

    st_folium(folium_map, width=1920, height=600)
else:
    st.warning("üåê –ì—Ä–∞–Ω–∏—Ü—ã —Å—Ç—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ GeoJSON.")

